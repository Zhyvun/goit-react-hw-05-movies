{"version":3,"file":"static/js/736.0322d076.chunk.js","mappings":"iQAEaA,EAAWC,EAAAA,EAAAA,IAAH,iGASRC,EAAWD,EAAAA,EAAAA,IAAH,2H,SC2CrB,EA/Ca,WACX,OAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,GAAUH,GACPI,MAAK,SAAAC,GAAO,OAAIN,EAAQM,EAAQP,KAApB,IACZQ,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,SACpBV,EAAQ,GACT,GACJ,GAAE,CAACC,IAIJ,OACE,wBACGF,EAAKY,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,KAAMC,EAA1C,EAA0CA,UAA1C,OACR,UAACrB,EAAD,YAEI,gBACEsB,IAAKJ,EAAY,UARZ,mCAQY,OACCA,GACdK,EAOJC,IAAKL,EACLM,MAAM,SAGV,UAACvB,EAAD,YACE,0BACE,uBAAG,UAAS,IAAEkB,MAEhB,0BACA,uBAAG,eAAc,IAAEC,UArBRJ,EADP,KA6Bf,C,kMCnDDS,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAGHC,EAAa,mCAAG,+FACrBC,EAAS,CACbC,QAASH,EACTI,KAAM,GAHmB,SAKJL,EAAAA,EAAAA,IAAU,sBAAuB,CAAEG,OAAAA,IAL/B,uBAKnBG,EALmB,EAKnBA,KALmB,kBAMpBA,EAAKC,SANe,2CAAH,qDAUbC,EAAiB,mCAAG,WAAMC,GAAN,kFACzBN,EAAS,CACbC,QAASH,EACTI,KAAM,EACNI,MAAAA,GAJ6B,SAMRT,EAAAA,EAAAA,IAAU,gBAAiB,CAAEG,OAAAA,IANrB,uBAMvBG,EANuB,EAMvBA,KACRlB,QAAQsB,IAAIJ,EAAKC,SAPc,kBAQxBD,EAAKC,QAAQI,QAAO,SAAAC,GAAK,OAC9BA,EAAMC,MAAMC,cAAcC,SAASN,EAAMK,cADX,KARD,2CAAH,sDAcjBE,EAAa,mCAAG,WAAMpC,GAAN,kFACrBuB,EAAS,CACbC,QAASH,EACTI,KAAM,GAHmB,SAKJL,EAAAA,EAAAA,IAAA,iBAAoBpB,GAAW,CAAEuB,OAAAA,IAL7B,uBAKnBG,EALmB,EAKnBA,KALmB,kBAOpBA,GAPoB,2CAAH,sDAWbvB,EAAS,mCAAG,WAAMH,GAAN,kFACjBuB,EAAS,CACbC,QAASH,EACTI,KAAM,EACNY,SAAU,SAJW,kBAOAjB,EAAAA,EAAAA,IAAA,iBAAoBpB,EAApB,YAAuC,CAAEuB,OAAAA,IAPzC,uBAOfG,EAPe,EAOfA,KAPe,kBAQhBA,GARgB,sCAUvBlB,QAAQD,MAAM,KAAME,SACd,IAAI6B,MAAM,wBAXO,yDAAH,sDAgBTC,EAAY,mCAAG,WAAMvC,GAAN,kFACpBuB,EAAS,CACbC,QAASH,EACTI,KAAM,EACNY,SAAU,SAJc,SAMHjB,EAAAA,EAAAA,IAAA,iBAAoBpB,EAApB,YAAuC,CAAEuB,OAAAA,IANtC,uBAMlBG,EANkB,EAMlBA,KACRlB,QAAQsB,IAAIJ,GAPc,kBAQnBA,EAAKC,SARc,2CAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/services.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastItem = styled.div`\n  display: flex;\n  gap: 24px;\n\n  & + & {\n    margin-top: 16px;\n  }\n`;\n\nexport const CastInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-content: center;\n  justify-content: center;\n`;","import { useState, useEffect } from 'react'; // хуки з бібліотеки react\nimport { useParams } from 'react-router-dom'; // хук з бібліотеки react-router-dom\nimport { fetchCast } from 'services/services'; // ф-я запиту про акторськи склад\nimport imgnf from '../../pages/img/imgnf.jpg'\nimport { CastInfo, CastItem } from './Cast.styled'; // стилізація\n\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchCast(movieId)\n      .then(credits => setCast(credits.cast))\n      .catch(error => {\n        console.error(error.message);\n        setCast([]);\n      });\n  }, [movieId]);\n\n  const imageUrl = 'https://image.tmdb.org/t/p/w300'; //https://developer.themoviedb.org/reference/person-images\n// const defaultImg = 'img';\n  return (\n    <ul>\n      {cast.map(({ id, profile_path, original_name, name, character }) => (\n        <CastItem key={id}>\n      \n            <img\n              src={profile_path \n                ? `${imageUrl}${profile_path}`\n                : imgnf}\n                // Варіант через посилання на зовнішню сторінку\n                // src={\n                //   profile_path\n                //     ? `https://image.tmdb.org/t/p/w300${profile_path}`\n                //     : `https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg`\n                // }\n              alt={original_name}\n              width=\"120\"\n            />\n      \n          <CastInfo>\n            <p>\n              <b>Name:</b> {name}\n            </p>\n            <p>\n            <b>Character:</b> {character}\n            </p>\n          </CastInfo>\n        </CastItem>\n      ))}\n    </ul>\n  );\n};\nexport default Cast;\n\n//*#info - відображення інформації про акторський склад фільму\n/*\nconst Cast = () => { ... } - оголошуємо фукнціональний компонент \"Cast\"\nconst [cast, setCast] = useState([]); - хук стану useState, cast - зберігає інформацію про актрів, setCast - оновлення стану - setCast([]) - 1 раз\nconst { movieId } = useParams() - хук useParams() для отримання параметрів ідентифікатору фільму { movieId } з URL\n\nuseEffect(() => { ... }, [movieId]); - використання хука useEffect для запиту до API для отримання інформації про акторський склад, \nзапит здійснюється тіьки тоді коли зміниться [movieId]\n\nfetchCast(movieId).then(credits => setCast(credits.cast)).catch(error => {...} - ф-я з пропсом (movieId) для отримання інформації про акторський склад\nколи результати отримані оновлюється \"cast\". Якщо помилка - виведи повідомлення в консоль\n\nconst imageUrl = - URL для зображення акторів\n\nПовертаємо розмітку:\n{cast.map(actor => ( ... ))} - map для ітерації по масиву \n<CastItem key={actor.id}> ... </CastItem> - елемент списку з ключем для ідентифікації актора\n{actor.profile_path && ( ... )} - перевіряємо URL чи є зображення актора\n\n<img src={${imageUrl}${actor.profile_path}} alt={actor.name} width=\"120\" /> - Виведення зображення актора\nURL- змінна imageUrl. \nШирина зображення - 120 пікселів.\n\n<CastInfo> ... </CastInfo> - інформаціія про актора\n\n*/","import axios from 'axios'; //бібліотека відправки асинхронних HTTP-запитів до API\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '6cbea8cece37cf85eba0b83585dd8520';\n\n// Список популярних фільмів на поточний день\nexport const fetchTrending = async () => {\n  const params = {\n    api_key: API_KEY,\n    page: 1, // пагінація результатів\n  }; \n  const { data } = await axios.get('/trending/movie/day', { params });\n  return data.results;\n};\n\n//Пошук фільмім по запиту (query)\nexport const fetchSearchResult = async query => {\n  const params = {\n    api_key: API_KEY,\n    page: 1,\n    query,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  console.log(data.results)\n  return data.results.filter(movie =>\n    movie.title.toLowerCase().includes(query.toLowerCase())\n  );\n};\n\n//Інформація про обраний фільм (movieId)\nexport const fetchOneMovie = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    page: 1,\n  };\n  const { data } = await axios.get(`/movie/${movieId}`, { params });\n  // console.log(data);\n  return data;\n};\n\n//Результат про акторський склад, ролі (moviedId)\nexport const fetchCast = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    page: 1,\n    language: 'en-US',\n  };\n   try{  \n  const { data } = await axios.get(`/movie/${movieId}/credits`, { params });\n  return data;\n} catch (error) {\n  console.error(error.message);\n  throw new Error('Failed to fetch cast');\n}\n};\n\n//Результат огляду фільму (moviedId)\nexport const fetchReviews = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    page: 1,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, { params });\n  console.log(data);\n  return data.results;\n  \n};\n\n//*#info - функції пошуку (асинхронні запити до API)"],"names":["CastItem","styled","CastInfo","useState","cast","setCast","movieId","useParams","useEffect","fetchCast","then","credits","catch","error","console","message","map","id","profile_path","original_name","name","character","src","imgnf","alt","width","axios","API_KEY","fetchTrending","params","api_key","page","data","results","fetchSearchResult","query","log","filter","movie","title","toLowerCase","includes","fetchOneMovie","language","Error","fetchReviews"],"sourceRoot":""}