{"version":3,"file":"static/js/485.44065d98.chunk.js","mappings":"wNAGaA,EAAOC,EAAAA,EAAAA,GAAH,kDAIJC,EAAOD,EAAAA,EAAAA,GAAH,yFAMJE,GAAYF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,6G,SCgCtB,EAtCmB,SAAC,GAAgB,IAAdI,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACP,EAAD,UACGK,EAAOG,OAAS,GACjBH,EAAOI,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MAChB,OACE,SAACT,EAAD,WACE,SAACC,EAAD,CAAWS,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMR,GAA/C,SACCK,KAFQD,EAMd,KAaN,C,6HC9BYK,EAAUd,EAAAA,EAAAA,IAAH,wCAIPe,EAAYf,EAAAA,EAAAA,GAAH,oC,mBCetB,EAlBa,WACb,OAA4BgB,EAAAA,EAAAA,UAAU,IAAtC,eAAOZ,EAAP,KAAea,EAAf,KASA,OAPAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,MACCC,MAAK,SAAAC,GAAWJ,EAAUI,EAC1B,IACAC,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,EAAME,QAAxB,GACb,GAAE,KAGD,UAACX,EAAD,YACE,SAACC,EAAD,UAAW,sBACRX,EAAOG,SAAU,SAACmB,EAAA,EAAD,CAAYtB,OAAQA,MAG3C,C,kMCnBDuB,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAGHT,EAAa,mCAAG,+FACrBU,EAAS,CACbC,QAASF,EACTG,KAAM,GAHmB,SAKJJ,EAAAA,EAAAA,IAAU,sBAAuB,CAAEE,OAAAA,IAL/B,uBAKnBG,EALmB,EAKnBA,KALmB,kBAMpBA,EAAKC,SANe,2CAAH,qDAUbC,EAAiB,mCAAG,WAAMC,GAAN,kFACzBN,EAAS,CACbC,QAASF,EACTG,KAAM,EACNI,MAAAA,GAJ6B,SAMRR,EAAAA,EAAAA,IAAU,gBAAiB,CAAEE,OAAAA,IANrB,uBAMvBG,EANuB,EAMvBA,KACRR,QAAQY,IAAIJ,EAAKC,SAPc,kBAQxBD,EAAKC,QAAQI,QAAO,SAAAC,GAAK,OAC9BA,EAAM5B,MAAM6B,cAAcC,SAASL,EAAMI,cADX,KARD,2CAAH,sDAcjBE,EAAa,mCAAG,WAAMC,GAAN,kFACrBb,EAAS,CACbC,QAASF,EACTG,KAAM,GAHmB,SAKJJ,EAAAA,EAAAA,IAAA,iBAAoBe,GAAW,CAAEb,OAAAA,IAL7B,uBAKnBG,EALmB,EAKnBA,KALmB,kBAOpBA,GAPoB,2CAAH,sDAWbW,EAAS,mCAAG,WAAMD,GAAN,kFACjBb,EAAS,CACbC,QAASF,EACTG,KAAM,EACNa,SAAU,SAJW,kBAOAjB,EAAAA,EAAAA,IAAA,iBAAoBe,EAApB,YAAuC,CAAEb,OAAAA,IAPzC,uBAOfG,EAPe,EAOfA,KAPe,kBAQhBA,GARgB,sCAUvBR,QAAQD,MAAM,KAAME,SACd,IAAIoB,MAAM,wBAXO,yDAAH,sDAgBTC,EAAY,mCAAG,WAAMJ,GAAN,kFACpBb,EAAS,CACbC,QAASF,EACTG,KAAM,EACNa,SAAU,SAJc,SAMHjB,EAAAA,EAAAA,IAAA,iBAAoBe,EAApB,YAAuC,CAAEb,OAAAA,IANtC,uBAMlBG,EANkB,EAMlBA,KACRR,QAAQY,IAAIJ,GAPc,kBAQnBA,EAAKC,SARc,2CAAH,qD","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","pages/Home/Home.styled.jsx","pages/Home/Home.jsx","services/services.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  list-style-type: none;\n`;\n\nexport const Item = styled.li`\n  font-weight: 600;\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n  color: #191d1e;\n\n  &:hover {\n    color: tomato;\n  }\n`;","// import { Link } from 'react-router-dom' // створення навігаційних посилань усередині програми без перезавантаження сторінки\nimport { useLocation } from 'react-router-dom' // хук - інформація про поточну URL-адресу.\nimport PropTypes from 'prop-types';\n\nimport { List, Item, MovieLink } from './MoviesList.styled';\n\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation(); // використовуємо хук для для отримання інформації про поточний URL\n\n  return (\n    <List> \n      {movies.length > 0 && \n      movies.map(({ id, title }) => {\n        return (\n          <Item key={id}>\n            <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n            {title}\n            </MovieLink>\n          </Item>\n        );\n      })}\n    </List>\n\n//   <List>\n//   {movies.map(movie => (\n//     <Item key={movie.id}>\n//       <MovieLink to={`/movies/${movie.id}`} state={{ from: location }}>\n//         {movie.title}\n//       </MovieLink>\n//     </Item>\n//   ))}\n// </List>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default MoviesList;\n\n//*#info - відображення списку фільмів у вигляді посилань для отримання дод. інформації\n/*\n<ul>  - список для відображення фільмів\n{movies.length > 0 && ...} - чи є фільми у списку. Якщо так, через 'map' відображаємо список.\nmovies.map(movie => { ... }) - Ітерація за списком фільмів і створення списку для кожного фільму.\n  \nreturn (\n<li key={movie.id}> - Створення списку з ключем, з унікальною ідентифікацією кожного фільма.\n\n<Link to={/movies/${movie.id}} state={{ from: location }}> Створюємо посилання за допомогою компонента Link. \n'to' вказує на URL-адресу фільму з його ідентифікатором {movie.id}. \nУ параметр state передаємо об'єкт з інформацією звідки було виконано перехід на цей фільм.\n\n{movie.title} -  Відображаємо назву фільму як гіперпосилання.\n)\n</ul>\n\n*/","import styled from \"@emotion/styled\";\n\n\n\nexport const HomeBox = styled.div`\npadding: 24px;\n`;\n\nexport const HomeTitle = styled.h1`\nmargin: 0;\n`;","import { useEffect, useState } from 'react' // імпорт хуків \nimport { fetchTrending } from 'services/services'; // ф-я запиту про популярні фільми на поточний день\nimport { HomeBox, HomeTitle } from './Home.styled'; // стилізовані компоненти\nimport MoviesList from 'components/MoviesList/MoviesList'; //список фільмів\n\nconst Home = () => {\nconst [movies, setMovies] = useState ([]);\n\nuseEffect(() => {\n  fetchTrending ()\n  .then(answer => {setMovies(answer)\n  })\n  .catch(error => console.error(error.message));\n}, []);\n\nreturn (\n  <HomeBox>\n    <HomeTitle>Trending movies</HomeTitle>\n    {!!movies.length && <MoviesList movies={movies}/>}\n  </HomeBox>\n);\n};\n\nexport default Home;\n\n//*#info - відображення списку популярних фільмів (хук useEffect)\n/*\nconst [movies, setMovies] = useState([]); - хук стану useState, змінна стану movies - зберігає [список] фільмів, функція setMovies - оновлення списку\n\nuseEffect(() => { ... }, []) - хук для запиту до API - \"популярні фільми\", [] - запит один раз, бо пустий масив\nfetchTrending().then(...) - ф-я отримання популярних фільмів\n{setMovies(answer)} - функція оновлення списку\n{!!movies.length && <MoviesList movies={movies}/>} } - виводимо список фільмів якщо його довжина > 0, (передаються як властивість до компонента MoviesList) \n\n*/","import axios from 'axios'; //бібліотека відправки асинхронних HTTP-запитів до API\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '6cbea8cece37cf85eba0b83585dd8520';\n\n// Список популярних фільмів на поточний день\nexport const fetchTrending = async () => {\n  const params = {\n    api_key: API_KEY,\n    page: 1, // пагінація результатів\n  }; \n  const { data } = await axios.get('/trending/movie/day', { params });\n  return data.results;\n};\n\n//Пошук фільмім по запиту (query)\nexport const fetchSearchResult = async query => {\n  const params = {\n    api_key: API_KEY,\n    page: 1,\n    query,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  console.log(data.results)\n  return data.results.filter(movie =>\n    movie.title.toLowerCase().includes(query.toLowerCase())\n  );\n};\n\n//Інформація про обраний фільм (movieId)\nexport const fetchOneMovie = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    page: 1,\n  };\n  const { data } = await axios.get(`/movie/${movieId}`, { params });\n  // console.log(data);\n  return data;\n};\n\n//Результат про акторський склад, ролі (moviedId)\nexport const fetchCast = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    page: 1,\n    language: 'en-US',\n  };\n   try{  \n  const { data } = await axios.get(`/movie/${movieId}/credits`, { params });\n  return data;\n} catch (error) {\n  console.error(error.message);\n  throw new Error('Failed to fetch cast');\n}\n};\n\n//Результат огляду фільму (moviedId)\nexport const fetchReviews = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    page: 1,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, { params });\n  console.log(data);\n  return data.results;\n  \n};\n\n//*#info - функції пошуку (асинхронні запити до API)"],"names":["List","styled","Item","MovieLink","Link","movies","location","useLocation","length","map","id","title","to","state","from","HomeBox","HomeTitle","useState","setMovies","useEffect","fetchTrending","then","answer","catch","error","console","message","MoviesList","axios","API_KEY","params","api_key","page","data","results","fetchSearchResult","query","log","filter","movie","toLowerCase","includes","fetchOneMovie","movieId","fetchCast","language","Error","fetchReviews"],"sourceRoot":""}