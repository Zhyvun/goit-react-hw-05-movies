{"version":3,"file":"static/js/186.dd2485cf.chunk.js","mappings":"kMAgDA,UA5CgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAWR,SAASE,EAAWC,GAClB,IAAMC,EAAO,IAAIC,KAAKF,GAQtB,MAPgB,UAAMC,EAAKE,cAAX,oBACXF,EAAKG,WAAa,GAAGC,WAAWC,SAAS,EAAG,KADjC,mBAEZL,EAAKM,UAAUF,WAAWC,SAAS,EAAG,KAF1B,kBAGbL,EAAKO,WAAWH,WAAWC,SAAS,EAAG,KAH1B,mBAIZL,EAAKQ,aAAaJ,WAAWC,SAAS,EAAG,KAJ7B,mBAKZL,EAAKS,aAAaL,WAAWC,SAAS,EAAG,KAL7B,KAQjB,CAED,OArBAK,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAaf,GACVgB,MAAK,SAAAC,GAAO,OAAIlB,EAAWkB,EAAf,IACZC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,SACpBtB,EAAW,GACZ,GACJ,GAAE,CAACC,KAeF,8BACGF,EAAQwB,OAAS,GAChB,wBACGxB,EAAQyB,KAAI,SAAAC,GAAM,OACjB,2BACE,0BAAI,WAASA,EAAOC,WACpB,yBAAG,mBAAiBvB,EAAWsB,EAAOE,gBACtC,uBAAIF,EAAOG,YAHJH,EAAOI,GADC,OASrB,uBAAG,wDAIV,C,kMC5CDC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAGHC,EAAa,mCAAG,+FACrBC,EAAS,CACbC,QAASH,EACTI,KAAM,GAHmB,SAKJL,EAAAA,EAAAA,IAAU,sBAAuB,CAAEG,OAAAA,IAL/B,uBAKnBG,EALmB,EAKnBA,KALmB,kBAMpBA,EAAKlB,SANe,2CAAH,qDAUbmB,EAAiB,mCAAG,WAAMC,GAAN,kFACzBL,EAAS,CACbC,QAASH,EACTI,KAAM,EACNG,MAAAA,GAJ6B,SAMRR,EAAAA,EAAAA,IAAU,gBAAiB,CAAEG,OAAAA,IANrB,uBAMvBG,EANuB,EAMvBA,KANuB,kBAOxBA,EAAKlB,QAAQqB,QAAO,SAAAC,GAAK,OAC9BA,EAAMC,MAAMC,cAAcC,SAASL,EAAMI,cADX,KAPD,2CAAH,sDAajBE,EAAa,mCAAG,WAAM3C,GAAN,kFACrBgC,EAAS,CACbC,QAASH,EACTI,KAAM,GAHmB,SAKJL,EAAAA,EAAAA,IAAA,iBAAoB7B,GAAW,CAAEgC,OAAAA,IAL7B,uBAKnBG,EALmB,EAKnBA,KACRf,QAAQwB,IAAIT,GANe,kBAOpBA,GAPoB,2CAAH,sDAWbU,EAAS,mCAAG,WAAM7C,GAAN,kFACjBgC,EAAS,CACbC,QAASH,EACTI,KAAM,EACNY,SAAU,SAJW,SAMAjB,EAAAA,EAAAA,IAAA,iBAAoB7B,EAApB,YAAuC,CAAEgC,OAAAA,IANzC,uBAMfG,EANe,EAMfA,KANe,kBAOhBA,GAPgB,2CAAH,sDAWTpB,EAAY,mCAAG,WAAMf,GAAN,kFACpBgC,EAAS,CACbC,QAASH,EACTI,KAAM,EACNY,SAAU,SAJc,SAMHjB,EAAAA,EAAAA,IAAA,iBAAoB7B,EAApB,YAAuC,CAAEgC,OAAAA,IANtC,uBAMlBG,EANkB,EAMlBA,KANkB,kBAOnBA,EAAKlB,SAPc,2CAAH,qD","sources":["components/Reviews/Reviews.jsx","services/services.jsx"],"sourcesContent":["import { useState, useEffect } from 'react'; // імпорт хуків\nimport { useParams } from 'react-router-dom';// параметри URL\nimport { fetchReviews } from 'services/services';//ф-я fetchReviews з модуля services\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchReviews(movieId)\n      .then(results => setReviews(results))\n      .catch(error => {\n        console.error(error.message);\n        setReviews([]);\n      });\n  }, [movieId]);\n\n  function formatDate(dateString) {\n    const date = new Date(dateString);\n    const formatDate = `${date.getFullYear()}\n    - ${(date.getMonth() + 1).toString().padStart(2, '0')}\n    - ${date.getDate().toString().padStart(2, '0')}\n    (${date.getHours().toString().padStart(2, '0')}\n    : ${date.getMinutes().toString().padStart(2, '0')}\n    : ${date.getSeconds().toString().padStart(2, '0')}) `;\n\n    return formatDate;\n  }\n\n  return (\n    <>\n      {reviews.length > 0 ? (\n        <ul>\n          {reviews.map(review => (\n            <li key={review.id}>\n              <h3>Author: {review.author}</h3>\n              <p>Date of create: {formatDate(review.created_at)}</p>\n              <p>{review.content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>SORRY! But We don't have any revies for this movie</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n\n//* info - Reviews відображає список відгуків для певного фільму\n/*\nimport { useParams } from 'react-router-dom' - дозволяє отримвуати параметри URL.\nuseState -створення стану reviews, для зберігаєння списку відгуків.\nuseParams - отримання movieId з параметрів URL, ID фільму, для якого відображення відгуків.\nuseEffect - викликаємо функції fetchReviews при завантаженні компонента. \nТе що отримали пишемо в стан reviews, інакше помилка встановлюємо пустий список.\nformatDate -  рядок з датою форматуємо у формат РРРР - ММ - ДД ГГ:ХХ:СС року, місяця, дня, години, хвилини та секунди.\n\n*/","import axios from 'axios'; //бібліотека відправки асинхронних HTTP-запитів до API\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '6cbea8cece37cf85eba0b83585dd8520';\n\n// Список популярних фільмів на поточний день\nexport const fetchTrending = async () => {\n  const params = {\n    api_key: API_KEY,\n    page: 1, // пагінація результатів\n  };\n  const { data } = await axios.get('/trending/movie/day', { params });\n  return data.results;\n};\n\n//Пошук фільмім по запиту (query)\nexport const fetchSearchResult = async query => {\n  const params = {\n    api_key: API_KEY,\n    page: 1,\n    query,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  return data.results.filter(movie =>\n    movie.title.toLowerCase().includes(query.toLowerCase())\n  );\n};\n\n//Інформація про обраний фільм (movieId)\nexport const fetchOneMovie = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    page: 1,\n  };\n  const { data } = await axios.get(`/movie/${movieId}`, { params });\n  console.log(data);\n  return data;\n};\n\n//Результат про акторський склад, ролі (moviedId)\nexport const fetchCast = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    page: 1,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/credits`, { params });\n  return data;\n};\n\n//Результат огляду фільму (moviedId)\nexport const fetchReviews = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    page: 1,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, { params });\n  return data.results;\n};\n\n//*#info - функції пошуку (асинхронні запити до API)"],"names":["useState","reviews","setReviews","movieId","useParams","formatDate","dateString","date","Date","getFullYear","getMonth","toString","padStart","getDate","getHours","getMinutes","getSeconds","useEffect","fetchReviews","then","results","catch","error","console","message","length","map","review","author","created_at","content","id","axios","API_KEY","fetchTrending","params","api_key","page","data","fetchSearchResult","query","filter","movie","title","toLowerCase","includes","fetchOneMovie","log","fetchCast","language"],"sourceRoot":""}